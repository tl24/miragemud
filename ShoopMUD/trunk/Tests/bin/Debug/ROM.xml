<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ROM</name>
    </assembly>
    <members>
        <member name="M:rom.command.MethodInvoker.registerType(System.Type)">
            <summary>
                Register a class that exposes command methods.
                The methods must be marked with the CommandAttribute
            </summary>
            <see cref="!:rom.attribute.CommandAttribute"/>
            <param name="t">The type to register</param>
        </member>
        <member name="T:rom.command.MethodHelper">
            <summary>
            Helper class for holding attributes about a command and invoking it.
            </summary>
        </member>
        <member name="M:rom.command.MethodHelper.#ctor(System.String,System.Reflection.MethodInfo,System.Int32,System.String)">
            <summary>
            Constructs an instace of the method helper
            </summary>
            <param name="name">The name of the method</param>
            <param name="methInfo">Reflection methodInfo object</param>
            <param name="level">The minimum player level required to execute the command</param>
            <param name="description">A description of the method</param>
        </member>
        <member name="M:rom.command.MethodHelper.invoke(System.Object,rom.data.Animate,System.String)">
            <summary>
            Invoke the method with the given arguments
            </summary>
            <param name="target">The object instance on which to invoke the method</param>
            <param name="actor">The player or caller of the command</param>
            <param name="arguments">Arguments to the command</param>
            <returns>Returns the string representation of the result or null if no return</returns>
        </member>
        <member name="P:rom.command.MethodHelper.ArgCount">
            <summary>
            Number of arguments to the command, not including private arguments such as "self"
            </summary>
        </member>
        <member name="P:rom.command.MethodHelper.HasRest">
            <summary>
            True if the command has a ToEOL argument, which means it has a variable number of arguments
            </summary>
        </member>
        <member name="P:rom.command.MethodHelper.Name">
            <summary>
            The name of the method
            </summary>
        </member>
        <member name="P:rom.command.MethodHelper.Level">
            <summary>
            The required player level to execute the command
            </summary>
        </member>
        <member name="P:rom.command.MethodHelper.Description">
            <summary>
            A description of what the command does
            </summary>
        </member>
        <member name="P:rom.command.MethodHelper.method">
            <summary>
            Gets the System.Reflection.MethodInfo for this method
            </summary>
        </member>
        <member name="T:rom.command.ArgumentParser">
            <summary>
            Class for tokenizing input into arguments.  The parser
            splits on whitespace except when embedded within single or
            double quotes.
            </summary>
        </member>
        <member name="M:rom.command.ArgumentParser.#ctor(System.String)">
            <summary>
                Create an ArgumentParser to parse the given input
            </summary>
            <param name="input">the input containing arguments to parse</param>
        </member>
        <member name="M:rom.command.ArgumentParser.getNextArgument">
            <summary>
            Gets the next argument in the list
            </summary>
            <returns>the next argument</returns>
        </member>
        <member name="M:rom.command.ArgumentParser.isEmpty">
            <summary>
                Returns true if there are no remaining arguments
            </summary>
            <returns>true/false</returns>
        </member>
        <member name="M:rom.command.ArgumentParser.getRest">
            <summary>
            Get the rest of the input, disregarding any spaces or quotes
            </summary>
            <returns>the remaining input</returns>
        </member>
        <member name="T:rom.command.Interpreter">
            <summary>
                A class for interpreting commands from players.
            Use the execute command method.
            </summary>
        </member>
        <member name="M:rom.command.IInterpret.execute(rom.data.Player,System.String)">
            <summary>
            Interpret the given command for the player
            </summary>
            <param name="actor">The player</param>
            <param name="input">the input string of arguments</param>
            <returns>true if the command was executed</returns>
        </member>
        <member name="M:rom.command.Interpreter.#ctor">
            <summary>
                Creates an instance of an interpreter
            </summary>
        </member>
        <member name="M:rom.command.Interpreter.getDefaultInterpreter">
            <summary>
            Gets the default interpreter for a player
            </summary>
            <returns>the default interpreter</returns>
        </member>
        <member name="M:rom.command.Interpreter.executeCommand(rom.data.Player,System.String)">
            <summary>
                Executes a command for a player.  The list of interpreters
            for the player will be searched until a command is successfully
            executed.
            </summary>
            <param name="actor">the player</param>
            <param name="input">command and arguments</param>
            <returns>true if a command was executed</returns>
        </member>
        <member name="M:rom.command.Interpreter.execute(rom.data.Player,System.String)">
            <summary>
                Execute a command from a player.  The input string will be
            parsed, if it contains a valid command that command will
            be located and executed.
            </summary>
            <param name="actor">The player executing the command</param>
            <param name="input">the command and arguments</param>
            <returns>true if executed successfully</returns>
        </member>
        <member name="M:rom.command.Interpreter.speak(rom.data.Player,System.String)">
            <summary>
                Say something to everyone in the room
            </summary>
            <param name="actor">the player speaking</param>
            <param name="args">the message to speak</param>
            <param name="extraArgs"></param>
        </member>
        <member name="T:rom.io.serialization.IObjectDeserializer">
            <summary>
            An object that will Deserialize a given object
            </summary>
        </member>
        <member name="M:rom.io.serialization.IObjectDeserializer.Deserialize(System.String)">
            <summary>
                Deserialize the object refered to by name
            </summary>
            <param name="name">the name of the object</param>
            <returns>the created object</returns>
        </member>
        <member name="T:rom.io.serialization.IObjectSerializer">
            <summary>
            An object that will Serialize a given object
            </summary>
        </member>
        <member name="M:rom.io.serialization.IObjectSerializer.Serialize(System.Object,System.String,rom.io.ITransaction)">
            <summary>
                Serialize the given object using the passed transaction
            </summary>
            <param name="o">the object to serialize</param>
            <param name="name">the name of the object</param>
            <param name="txn">the transaction that the serialization process will be part of</param>
        </member>
        <member name="M:rom.io.serialization.IObjectSerializer.Serialize(System.Object,System.String)">
            <summary>
                Serialize the given object.  The Serialization process will be
            a single transaction.
            </summary>
            <param name="o">the object to serialize</param>
            <param name="name">the name of the object</param>
        </member>
        <member name="T:rom.data.Player">
            <summary>
                A player is controlled by a live person and a participant in
            the game (as opposed to a Mobile which is a game object controlled by AI).
            It is a descendant of Animate, the base-class for living breating things
            </summary>
        </member>
        <member name="T:rom.data.Animate">
            <summary>
                A base class for living breathing things such as players
            and mobiles.
            </summary>
        </member>
        <member name="T:rom.data.objectquery.IQueryable">
            <summary>
            IQueryable is an interface that designates an object is accessible
            through a URI naming scheme.  It provides methods for accessing the URI
            of an object as well as searching its children that also implement the interface.
            </summary>
        </member>
        <member name="M:rom.data.objectquery.IQueryable.find(rom.data.objectquery.ObjectQuery)">
            <summary>
            Finds the first object matching the given query
            </summary>
            <param name="query">the uri query</param>
            <returns>the first matching object</returns>
        </member>
        <member name="M:rom.data.objectquery.IQueryable.findAll(rom.data.objectquery.ObjectQuery)">
            <summary>
            Finds all objects matching the given query
            </summary>
            <param name="query">the uri query</param>
            <returns>array of matching objects</returns>
        </member>
        <member name="M:rom.data.objectquery.IQueryable.find(rom.data.objectquery.ObjectQuery,System.Int32)">
            <summary>
            For a query that returns multiple objects, the nth object in the list.
            </summary>
            <param name="query">the uri query</param>
            <param name="index">the index of the item in the result set to return</param>
            <returns>the nth item in the result of the query</returns>
        </member>
        <member name="M:rom.data.objectquery.IQueryable.find(System.String)">
            <summary>
            Finds the first object matching the given query
            </summary>
            <param name="query">the uri query</param>
            <returns>the first matching object</returns>
        </member>
        <member name="M:rom.data.objectquery.IQueryable.findAll(System.String)">
            <summary>
            Finds all objects matching the given query
            </summary>
            <param name="query">the uri query</param>
            <returns>array of matching objects</returns>
        </member>
        <member name="M:rom.data.objectquery.IQueryable.find(System.String,System.Int32)">
            <summary>
            For a query that returns multiple objects, the nth object in the list.
            </summary>
            <param name="query">the uri query</param>
            <param name="index">the index of the item in the result set to return</param>
            <returns>the nth item in the result of the query</returns>
        </member>
        <member name="P:rom.data.objectquery.IQueryable.URI">
            <summary>
            Returns the URI for this object.
            </summary>
        </member>
        <member name="P:rom.data.Animate.level">
            <summary>
                The level of this animate
            </summary>
        </member>
        <member name="P:rom.data.Animate.sex">
            <summary>
                The sex of this animate
            </summary>
        </member>
        <member name="P:rom.data.Animate.title">
            <summary>
                The name of this animate
            </summary>
        </member>
        <member name="M:rom.data.Player.#ctor">
            <summary>
                Creates an instance of a player
            </summary>
        </member>
        <member name="M:rom.data.Player.setPassword(System.String)">
            <summary>
                Sets the password for the character, encrypting it first.
            </summary>
            <param name="password">plain text password</param>
        </member>
        <member name="M:rom.data.Player.comparePassword(System.String)">
            <summary>
                Compares another password to the password for this charater
            </summary>
            <param name="otherPassword">plain text password</param>
            <returns>true if the password matches the one for this player</returns>
        </member>
        <member name="M:rom.data.Player.encryptPassword(System.String)">
            <summary>
                Encrypts a password for storage or comparison.  The
            encryption is one way.
            </summary>
            <param name="password">the password to encrypt</param>
            <returns>the encrypted password</returns>
        </member>
        <member name="M:rom.data.Player.initConfigSettings">
            <summary>
                Retrieve configuration settings
            </summary>
        </member>
        <member name="M:rom.data.Player.load(System.String)">
            <summary>
                Loads a player object from a file
            </summary>
            <param name="name">the name of the player to load</param>
            <returns></returns>
        </member>
        <member name="M:rom.data.Player.save(rom.data.Player)">
            <summary>
                Saves the given player to disk
            </summary>
            <param name="p">the player to save</param>
        </member>
        <member name="P:rom.data.Player.password">
            <summary>
                The player's password
            </summary>
        </member>
        <member name="P:rom.data.Player.description">
            <summary>
                The player's description
            </summary>
        </member>
        <member name="P:rom.data.Player.descriptor">
            <summary>
               Gets or sets the descriptor for this player
            </summary>
        </member>
        <member name="P:rom.data.Player.interpreter">
            <summary>
                The command interpreters in effect for this player
            </summary>
        </member>
        <member name="T:rom.io.serialization.XmlSerializerAdapter">
            <summary>
            Serializes/Deserializes object into xml format
            </summary>
        </member>
        <member name="T:rom.command.Nanny">
            <summary>
                The Nanny handles connections until they have either loaded a previous player
            or have created a new one
            </summary>
        </member>
        <member name="M:rom.command.Nanny.#ctor(rom.io.Descriptor)">
            <summary>
                Creates an instance of the nanny for this descriptor.
            </summary>
            <param name="descriptor">the descriptor</param>
        </member>
        <member name="M:rom.command.Nanny.getInstance(rom.io.Descriptor)">
            <summary>
                Creates a nanny instance for the given descriptor.  The nanny
            will handle input and output until the descriptor is fully connected.
            </summary>
            <param name="descriptor">the descriptor</param>
            <returns>nanny instance</returns>
        </member>
        <member name="M:rom.command.Nanny.handleInput(System.String)">
            <summary>
                Processes the current input of the descriptor
            </summary>
            <param name="input">current input</param>
        </member>
        <member name="M:rom.command.Nanny.getName(System.String)">
            <summary>
                Get the players name (user id)
            </summary>
            <param name="input">input</param>
        </member>
        <member name="M:rom.command.Nanny.checkName(System.String)">
            <summary>
                Checks a name to see if it is valid
            </summary>
            <param name="name">the name to check</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:rom.command.Nanny.getOldPassword(System.String)">
            <summary>
                Get an existing player's password
            </summary>
            <param name="input">password</param>
        </member>
        <member name="M:rom.command.Nanny.confirmNewName(System.String)">
            <summary>
                Confirm a new player's name
            </summary>
            <param name="input">y or n</param>
        </member>
        <member name="M:rom.command.Nanny.getNewPassword(System.String)">
            <summary>
                Get a new password for a new player
            </summary>
            <param name="input">new password</param>
        </member>
        <member name="M:rom.command.Nanny.confirmPassword(System.String)">
            <summary>
                Confirm a password entered
            </summary>
            <param name="input">password</param>
        </member>
        <member name="M:rom.command.Nanny.finish(System.String)">
            <summary>
                Final state
            </summary>
            <param name="input"></param>
        </member>
        <member name="F:rom.io.IO._port">
            <summary>
                The network port being listened on
            </summary>
        </member>
        <member name="F:rom.io.IO._shutdown">
            <summary>
                Shutdown flag to cause the io loop to stop
            </summary>
        </member>
        <member name="F:rom.io.IO.sockets">
            <summary>
                The socket connections
            </summary>
        </member>
        <member name="F:rom.io.IO.descMap">
            <summary>
                A mapping from sockets to their descriptors
            </summary>
        </member>
        <member name="M:rom.io.IO.run">
            <summary>
                Starts the main processing loop that listens for socket
            connections and then reads and writes from those that are
            ready.  This method will block indefinitely until the
            shutdown flag is set to true.
            </summary>
        </member>
        <member name="M:rom.io.IO.initConnection(System.Net.Sockets.TcpClient)">
            <summary>
                Initialize a new connection
            </summary>
            <param name="client"></param>
        </member>
        <member name="T:rom.attributes.CommandAttribute">
            <summary>
                Attribute applied to a method to identify it as a command that is callable
                by the user.
            </summary>
        </member>
        <member name="M:rom.attributes.CommandAttribute.#ctor">
            <summary>
                Creates an instance of the attribute
            </summary>
        </member>
        <member name="P:rom.attributes.CommandAttribute.Level">
            <summary>
                The required level to use the command
            </summary>
        </member>
        <member name="P:rom.attributes.CommandAttribute.Description">
            <summary>
                A helpful description of the command
            </summary>
        </member>
        <member name="F:rom.attributes.ArgumentType.Self">
            <summary>
                Refers to the invoking player
            </summary>
        </member>
        <member name="F:rom.attributes.ArgumentType.Player">
            <summary>
                The argument refers to player invoking the command
            </summary>
        </member>
        <member name="F:rom.attributes.ArgumentType.Object">
            <summary>
                Use the input argument to lookup an object by name
            </summary>
        </member>
        <member name="F:rom.attributes.ArgumentType.Animate">
            <summary>
                Use the input argument to lookup either a Mob or Player by name
            </summary>
        </member>
        <member name="F:rom.attributes.ArgumentType.Mobile">
            <summary>
                Use the input argument to lookup a Mob by name
            </summary>
        </member>
        <member name="F:rom.attributes.ArgumentType.ToEOL">
            <summary>
                The argument uses the rest of the input arguments as one parameter
            </summary>
        </member>
        <member name="F:rom.attributes.ScopeType.Inventory">
            <summary>
                Look for an item within the current players inventory
            </summary>
        </member>
        <member name="F:rom.attributes.ScopeType.Room">
            <summary>
                Look for an item or player with the current room
            </summary>
        </member>
        <member name="F:rom.attributes.ScopeType.Global">
            <summary>
                Look for an item or player anywhere
            </summary>
        </member>
        <member name="T:rom.attributes.ConfirmationAttribute">
            <summary>
                Attribute applied to a method to identify it as a command that is callable
                by the user.
            </summary>
        </member>
        <member name="M:rom.attributes.ConfirmationAttribute.#ctor">
            <summary>
                Creates an instance of the attribute
            </summary>
        </member>
        <member name="P:rom.attributes.ConfirmationAttribute.Message">
            <summary>
                Message to show to the user to ask for confirmation
            </summary>
        </member>
        <member name="P:rom.attributes.ConfirmationAttribute.CancellationMessage">
            <summary>
                A helpful description of the command
            </summary>
        </member>
        <member name="T:rom.io.ConnectedState">
            <summary>
                The connection state for a player.  A player goes through
            various states before they are completely logged in
            </summary>
        </member>
        <member name="F:rom.io.ConnectedState.Connecting">
            <summary>
                The player is connecting
            </summary>
        </member>
        <member name="F:rom.io.ConnectedState.Idle">
            <summary>
                The player is idle
            </summary>
        </member>
        <member name="F:rom.io.ConnectedState.Playing">
            <summary>
                The player is playing, completely logged in and not idle
            </summary>
        </member>
        <member name="T:rom.io.Descriptor">
            <summary>
                Handles io for a player
            </summary>
        </member>
        <member name="F:rom.io.Descriptor._player">
            <summary>
                The player object attached to this descriptor
            </summary>
        </member>
        <member name="F:rom.io.Descriptor._nanny">
            <summary>
                The nanny for this descriptor, if applicable
            </summary>
        </member>
        <member name="F:rom.io.Descriptor._client">
            <summary>
                A reference to the tcp client (socket) that this description
            reads and writes from
            </summary>
        </member>
        <member name="F:rom.io.Descriptor.reader">
            <summary>
                A reader for the tcp client's stream
            </summary>
        </member>
        <member name="F:rom.io.Descriptor.writer">
            <summary>
                A writer for the tcp client's stream
            </summary>
        </member>
        <member name="F:rom.io.Descriptor.inputQueue">
            <summary>
                The lines that have been read from the socket
            </summary>
        </member>
        <member name="F:rom.io.Descriptor.outputQueue">
            <summary>
                The lines that are waiting to be written to the socket
            </summary>
        </member>
        <member name="F:rom.io.Descriptor._inputLine">
            <summary>
                The incomming line to be processed
            </summary>
        </member>
        <member name="F:rom.io.Descriptor.inputBuffer">
            <summary>
                Buffer to hold input until it forms a complete line
            </summary>
        </member>
        <member name="F:rom.io.Descriptor.bufferLength">
            <summary>
                The number of characters that have been put in the buffer
            </summary>
        </member>
        <member name="F:rom.io.Descriptor.lastRead">
            <summary>
                The last command read
            </summary>
        </member>
        <member name="F:rom.io.Descriptor.snoopers">
            <summary>
                The list of people snooping this connection
            </summary>
        </member>
        <member name="F:rom.io.Descriptor._state">
            <summary>
                The stage of connection that this descriptor is at
            </summary>
        </member>
        <member name="F:rom.io.Descriptor._commandRead">
            <summary>
                Indicates that a command was read this cycle
            </summary>
        </member>
        <member name="M:rom.io.Descriptor.#ctor(System.Net.Sockets.TcpClient)">
            <summary>
                Create a descriptor to read and write to the given
            tcp client (Socket)
            </summary>
            <param name="client"> the client to read and write from</param>
        </member>
        <member name="M:rom.io.Descriptor.read">
            <summary>
                Read from the descriptor.  Returns True if successful.
                Populates an internal buffer, which can be read by read_from_buffer.
            </summary>
        </member>
        <member name="M:rom.io.Descriptor.readFromBuffer">
            <summary>
               Transfer input from buffer to INCOMM so a command can be processed. 
            </summary>
        </member>
        <member name="M:rom.io.Descriptor.writeToBuffer(System.String,System.Boolean)">
            <summary>
            Write the specified text to the descriptors output buffer. 
            If snoop parameter is true, write to any descriptors snooping
            this one as well, otherwise write to this descriptor only.
            </summary>
        </member>
        <member name="M:rom.io.Descriptor.writeToBuffer(System.String)">
            <summary>
            Write the specified text to the descriptors output buffer. 
            </summary>
        </member>
        <member name="M:rom.io.Descriptor.processOutputBuffer">
            <summary>
                Process the output waiting in the output buffer.  This
            data will be sent to the socket.
            </summary>
        </member>
        <member name="M:rom.io.Descriptor.write(System.String)">
            <summary>
               Write to the descriptor.  Similar to print statement.
            </summary>
            <param name="text">the text to write</param>
        </member>
        <member name="M:rom.io.Descriptor.echoOn">
            <summary>
                Turn input echoing back on after turning it off
            </summary>
            <see cref="M:rom.io.Descriptor.echoOff"/>
        </member>
        <member name="M:rom.io.Descriptor.echoOff">
            <summary>
                Turn input echoing off, used when accepting passwords
            </summary>
        </member>
        <member name="M:rom.io.Descriptor.snoop(rom.io.Descriptor)">
            <summary>
            Will cause the calling descriptor to snoop the given
            descriptor.  All text written to that descriptor will 
            also be be written to the caller until unsnoop is called.
            </summary>
            <param name="snoopee">the descriptor being snooped</param>
        </member>
        <member name="M:rom.io.Descriptor.unsnoop(rom.io.Descriptor)">
            <summary>
            The caller will stop snooping the given descriptor.
            </summary>
            <param name="snoopee">the descriptor being unsnooped</param>
        </member>
        <member name="M:rom.io.Descriptor.close">
            <summary>
                Closes the underlying connection
            </summary>
        </member>
        <member name="P:rom.io.Descriptor.state">
            <summary>
                The stage of connection that this descriptor is at
            </summary>
        </member>
        <member name="P:rom.io.Descriptor.player">
            <summary>
                The player object attached to this descriptor
            </summary>
        </member>
        <member name="P:rom.io.Descriptor.nanny">
            <summary>
                The nanny for this descriptor, can be null
            </summary>
        </member>
        <member name="P:rom.io.Descriptor.client">
            <summary>
                The socket for this description
            </summary>
        </member>
        <member name="P:rom.io.Descriptor.inputLine">
            <summary>
                The current line of input
            </summary>
        </member>
        <member name="P:rom.io.Descriptor.commandRead">
            <summary>
                Indicates that a command was read this cycle
            </summary>
        </member>
        <member name="T:rom.util.IndexedDictionary`1">
            <summary>
            Default implementation of the IIndexDictionary interface.  It provides a keyed-collection
            that is indexed for fast lookup of strings.  The collection does allow duplicates, and the
            elements are returned in sorted order.
            </summary>
            <typeparam name="TVal">The type of object the collection holds</typeparam>
        </member>
        <member name="M:rom.util.IndexedDictionary`1.findPage(System.String,rom.util.IndexedDictionary{`0}.ComparisonType)">
            <summary>
                Searches the index to find the first page that the key could
            occur on or fit if its an insertion
            </summary>
            <param name="key">the key to search on</param>
            <param name="type">The type of operation to be performed</param>
            <returns>the node for the index page</returns>
        </member>
        <member name="M:rom.util.IndexedDictionary`1.IndexPage.add(rom.util.IndexedDictionary{`0}.KeyNode)">
            <summary>
            Add the key node to this index page.  It is assumed that
            a check has already been made to determine that this is the correct
            page for the node.
            </summary>
            <param name="node">the node to add</param>
        </member>
        <member name="M:rom.util.IndexedDictionary`1.IndexPage.splitPage">
            <summary>
            Splits the current page in half creating 2 pages.
            The new page will come sorted after the existing page.
            </summary>
            <returns>The new page</returns>
        </member>
        <member name="M:rom.util.IndexedDictionary`1.IndexPage.compare(System.String)">
            <summary>
            Compares the given key with this index page.  If the
            key comes before the beginning of the page, -1 is returned.
            If the key would be contained in the index page, 0 is returned.
            If the key comes after the end of the page, 1 is returned.
            </summary>
            <param name="key">The key to compare</param>
            <returns>comparison result</returns>
        </member>
        <member name="T:rom.data.SexType">
            <summary>
                The sex for an animate
            </summary>
        </member>
        <member name="F:rom.data.SexType.Male">
            <summary>
                Male
            </summary>
        </member>
        <member name="F:rom.data.SexType.Female">
            <summary>
                Female
            </summary>
        </member>
        <member name="F:rom.data.SexType.Other">
            <summary>
                Other or Unknown
            </summary>
        </member>
        <member name="T:rom.data.objectquery.BaseQueryableCollection">
            <summary>
            This is an adapter for wrapping collections with IQueryable interface.
            The collection must only contain objects implementing IQueryable.  Other
            subclasses of this class may be used for specific collection types.
            </summary>
        </member>
        <member name="F:rom.data.objectquery.BaseQueryableCollection._flags">
            <summary>
            Attribute flags for the collection
            </summary>
        </member>
        <member name="F:rom.data.objectquery.BaseQueryableCollection._uri">
            <summary>
            The uri of this collection
            </summary>
        </member>
        <member name="M:rom.data.objectquery.BaseQueryableCollection.#ctor(System.String,rom.data.objectquery.QueryCollectionFlags)">
            <summary>
            Creates an adapter for a collection.  The adapter will allow the objects inside to
            be queryable through the URINameable interface
            </summary>
            <param name="uri">the uri for this collection</param>
            <param name="collection">the collection to wrap</param>
            <param name="flags">attributes about the collection</param>
        </member>
        <member name="M:rom.data.objectquery.BaseQueryableCollection.#ctor(System.String)">
            <summary>
            Creates an adapter for a collection.  The adapter will allow the objects inside to
            be queryable through the URINameable interface
            </summary>
            <param name="uri">the uri for this collection</param>
            <param name="collection">the collection to wrap</param>
        </member>
        <member name="M:rom.data.objectquery.BaseQueryableCollection.find(rom.data.objectquery.ObjectQuery)">
            <summary>
            Find the first object matching the given query
            </summary>
            <param name="query">the query</param>
            <returns>first matching object</returns>
        </member>
        <member name="P:rom.data.objectquery.BaseQueryableCollection.URI">
            <summary>
            Resource identifier for this object
            </summary>
        </member>
        <member name="T:rom.data.objectquery.ObjectQuery">
            <summary>
            Specifies a query over a URINameable set of resources
            </summary>
        </member>
        <member name="M:rom.data.objectquery.ObjectQuery.parse(System.String)">
            <summary>
            Parses a string representation of a uri query into a URI query object
            </summary>
            <param name="uriQueryString"></param>
            <returns></returns>
        </member>
    </members>
</doc>
