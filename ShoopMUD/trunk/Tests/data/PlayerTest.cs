// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Shoop.Data;
using System.Collections.Specialized;
using System.Configuration;
using System.IO;
namespace ROMtests
{
    /// <summary>
    ///This is a test class for rom.Data.Player and is intended
    ///to contain all rom.Data.Player Unit Tests
    ///</summary>
    [TestClass()]
    public class PlayerTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test Attributes
        // 
        //You can use the following additional Attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            NameValueCollection settings = ConfigurationManager.AppSettings;
            string playerDir = settings["player.dir"];
            // create the player directory
            Directory.CreateDirectory(playerDir);

        }
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for ComparePassword (string)
        ///</summary>
        [TestMethod()]
        public void comparePasswordTest()
        {
            Player target = new Player();
            target.SetPassword("mypassword");
            string otherPassword = "mypassword";

            bool expected = true;
            bool actual;

            actual = target.ComparePassword(otherPassword);

            Assert.AreEqual(expected, actual, "rom.Data.Player.ComparePassword did not return the expected value.");

            target.SetPassword("someotherpassword");
            expected = false;
            actual = target.ComparePassword(otherPassword);

            Assert.AreEqual(expected, actual, "rom.Data.Player.ComparePassword did not return the expected value.");
        }

        /// <summary>
        ///A test for password
        ///</summary>
        [TestMethod()]
        public void passwordTest()
        {
            Player target = new Player();

            string val = "mypassword"; // TODO: Assign to an appropriate value for the property

            target.SetPassword(val);


            Assert.AreNotEqual(val, target.Password, "rom.Data.Player.password was not encrypted.");
        }

        [TestMethod()]
        public void loadSaveTest()
        {
            Player target = new Player();
            target.Uri = "targetName";
            target.Title = "targetName";
            target.LongDescription = "target Description line 1\r\ntargeDescriptionon line 2";
            target.SetPassword("targetPassword");
            target.Level = 23;
            target.Sex = SexType.Female;

            Player.Save(target);
            Player loaded = Player.Load(target.Uri);

            Assert.AreEqual(target.Title, loaded.Title, "rom.Data.Player.Title field not equal to loaded value");
        }
    }


}
