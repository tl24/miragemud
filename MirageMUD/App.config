<?xml version="1.0"?>
<configuration>
	<configSections>
		<section name="castle" type="Castle.Windsor.Configuration.AppDomain.CastleSectionHandler, Castle.Windsor"/>
		<sectionGroup name="MirageMUD">
			<section name="ObjectStorageFactory" type="Mirage.IO.Serialization.ObjectStorageConfiguration, Mirage.IO"/>
			<section name="MudFactory" type="Mirage.Game.World.MudFactoryConfigSection, Mirage.Game"/>
			<section name="CommandLocations" type="System.Configuration.AppSettingsSection,System.configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/>
			<section name="MessageNamespaces" type="System.Configuration.AppSettingsSection,System.configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/>
			<section name="Roles" type="System.Configuration.AppSettingsSection,System.configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/>
		</sectionGroup>
		<section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net"/>
		<section name="JsonMessageFactory" type="JsonExSerializer.XmlConfigSection, JsonExSerializer"/>
	</configSections>
	<castle>
		<facilities>
			<facility id="startable.facility" type="Castle.Facilities.Startable.StartableFacility, Castle.MicroKernel"/>
			<facility id="logging.facility" type="Castle.Facilities.Logging.LoggingFacility, Castle.Facilities.Logging" loggingApi="log4net"/>
		</facilities>
		<components>
			
			<!-- ======  Start IO Section ====== -->
			<!-- Configure ports and clients here -->
			
			<!-- Recieves text input, this is your main client port -->
			<component id="TextClientListener" type="Mirage.Game.IO.Net.ClientListener`1[[Mirage.IO.Net.TextConnection, Mirage.IO]], Mirage.Game" service="Mirage.IO.Net.IClientListener, Mirage.IO" lifestyle="transient">
				<parameters>
					<!-- specify the host if you need to listen on a specific IP or domain -->
					<!--
						<host>localhost</host>
					-->
					<port>4500</port>
				</parameters>
			</component>
			
			<!-- Port for the GUI client, if you don't use the GUI client, then comment this out -->
			<component id="GuiClientListener" type="Mirage.Game.IO.Net.ClientListener`1[[Mirage.IO.Net.AdvancedConnection, Mirage.IO]], Mirage.Game" service="Mirage.IO.Net.IClientListener, Mirage.IO" lifestyle="transient">
				<parameters>
					<!-- specify the host if you need to listen on a specific IP or domain -->
					<!--
						<host>localhost</host>
					-->
					<port>4501</port>
				</parameters>
			</component>
			
			<component id="ClientManager" type="Mirage.IO.Net.ClientManager, Mirage.IO" service="Mirage.IO.Net.ClientManager, Mirage.IO">
				<!-- Specify the number of threads the client manager uses if you need to, but
				     otherwise it defaults to the number of processors -->
				<!--
				<parameters>
					<maxThreads>2</maxThreads>
				</parameters>
				-->
			</component>
			<!-- ******* End IO Section ******** -->
			
			<!-- Player Processing -->
			<component id="PlayerService" type="Mirage.Game.World.PlayerExecutorServiceBase, Mirage.Game"/>

			<component id="RaceRepository" type="Mirage.Game.World.RaceRepository, Mirage.Game" service="Mirage.Game.World.IRaceRepository, Mirage.Game"/>

			<component id="mudrepository" type="Mirage.Game.World.StockRepository, Mirage.Game" service="Mirage.Game.World.MudRepositoryBase, Mirage.Game">
				<parameters>
					<Channels>${ChannelRepository}</Channels>
				</parameters>
			</component>
			<component id="QueryManager" type="Mirage.Game.World.Query.QueryManager, Mirage.Game" service="Mirage.Game.World.Query.IQueryManager, Mirage.Game" lifestyle="transient">
				<parameters>
					<root>${mudrepository}</root>
				</parameters>
			</component>
			<component id="PlayerRepository" type="Mirage.Game.World.PlayerRepository`1[[Mirage.Game.World.Player, Mirage.Game]], Mirage.Game" service="Mirage.Game.World.IPlayerRepository, Mirage.Game"/>
			<component id="AreaRepository" type="Mirage.Game.World.AreaRepository`1[[Mirage.Game.World.Area, Mirage.Game]], Mirage.Game" service="Mirage.Game.World.IAreaRepository, Mirage.Game"/>

			<component id="ChannelRepository" type="Mirage.Game.Communication.ChannelRepository, Mirage.Game" service="Mirage.Game.Communication.IChannelRepository, Mirage.Game"/>

			<component id="MobileRepository" type="Mirage.Game.World.MobileRepository, Mirage.Game" service="Mirage.Game.World.IMobileRepository, Mirage.Game"/>

			<component id="SkillRepository" type="Mirage.Game.World.Skills.SkillRepository, Mirage.Game" service="Mirage.Game.World.Skills.ISkillRepository, Mirage.Game"/>

			<!-- Mobile Processing -->
			<component id="MobileService" type="Mirage.Game.World.MobileService, Mirage.Game">
				<parameters>
					<repository>${mudrepository}</repository>
				</parameters>
			</component>

			<component id="MessageFactory" type="Mirage.Game.Communication.MessageFactory, Mirage.Game" service="Mirage.Game.Communication.IMessageFactory, Mirage.Game"/>
			<component id="ViewManager" type="Mirage.Game.World.ViewManager, Mirage.Game" service="Mirage.Game.World.IViewManager, Mirage.Game" lifestyle="transient"/>



			<component id="MirageServer" type="Mirage.Game.MirageServer, Mirage.Game">
				<parameters>
					<Services>
						<list>
							<serviceentry>
								<service>${PlayerService}</service>
								<method>ClearFlagsAndRemove</method>
							</serviceentry>
							<serviceentry>
								<service>${PlayerService}</service>
								<method>ReadInput</method>
							</serviceentry>
							<serviceentry>
								<service>${MobileService}</service>
								<method>ProcessInput</method>
							</serviceentry>
							<serviceentry>
								<service>${PlayerService}</service>
								<method>WriteOutput</method>
							</serviceentry>
						</list>
					</Services>
				</parameters>
			</component>
		</components>
	</castle>
	<appSettings>
		<add key="default.room" value="Areas/DefaultArea/Rooms/DefaultRoom"/>
	</appSettings>
	<log4net>
		<appender name="OutputDebugStringAppender" type="log4net.Appender.OutputDebugStringAppender">
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%date [%thread] %-5level %logger [%property{NDC}] - %message%newline"/>
			</layout>
		</appender>
		<appender name="ColoredConsoleAppender" type="log4net.Appender.ColoredConsoleAppender">
			<mapping>
				<level value="ERROR"/>
				<foreColor value="Red"/>
			</mapping>
			<mapping>
				<level value="DEBUG"/>
				<backColor value="Green"/>
			</mapping>
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%date [%thread] %-5level %logger - %message%newline"/>
			</layout>
		</appender>
		<appender name="FileAppender" type="log4net.Appender.FileAppender">
			<file value="MirageMUD.log"/>
			<appendToFile value="false"/>
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%date [%thread] %-5level %logger - %message%newline"/>
			</layout>
		</appender>
		<root>
			<level value="DEBUG"/>
			<appender-ref ref="ColoredConsoleAppender"/>
			<appender-ref ref="FileAppender"/>
		</root>
		<logger name="DebugLogger">
			<level value="DEBUG"/>
		</logger>
	</log4net>
	<MirageMUD>
		<ObjectStorageFactory>
			<PersistenceManagers>
				<add name="player" base-path="players/" file-extension=".jsx" type="Mirage.IO.Serialization.JsonExPersistenceAdapter" persisted-type="Mirage.Game.World.Player, Mirage.Game"/>
				<add name="area" base-path="areas/" file-extension=".jsx" type="Mirage.IO.Serialization.JsonExPersistenceAdapter" persisted-type="Mirage.Game.World.Area, Mirage.Game"/>
			</PersistenceManagers>
		</ObjectStorageFactory>
		<MessageNamespaces>
			<!-- NOTE, namespaces(keys) must end in a slash -->
			<add key="system" value="messages/system.msg"/>
			<add key="common.error" value="messages/common.error.msg"/>
			<add key="communication" value="messages/communication.msg"/>
			<add key="movement" value="messages/movement.msg"/>
			<add key="negotiation" value="messages/negotiation.msg"/>
			<add key="negotiation.authentication" value="messages/negotiation.authentication.msg"/>
		</MessageNamespaces>
		<Roles>
			<add key="player" value="Role for all players"/>
			<add key="admin" value="Admin role has every system right regardless of role"/>
			<add key="immortal" value="All immortals should have this role"/>
			<add key="coder" value="For coder commands such as debugging, clearing caches, etc"/>
			<add key="builder" value="Area builders"/>
		</Roles>
	</MirageMUD>
	<JsonMessageFactory>
		<TypeBindings>
			<add alias="StringMessage" type="Mirage.Game.Communication.StringMessage, Mirage.Game"/>
			<add alias="ResourceMessage" type="Mirage.Game.Communication.ResourceMessage, Mirage.Game"/>
		</TypeBindings>
	</JsonMessageFactory>
<startup><supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0"/></startup></configuration>
