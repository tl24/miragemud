<?xml version="1.0" encoding="utf-8" ?>
<configuration>
	<configSections>
		<section name="castle"
			type="Castle.Windsor.Configuration.AppDomain.CastleSectionHandler, Castle.Windsor" />
		<sectionGroup name="MirageMUD">
			<section name="ObjectStorageFactory" type="Mirage.Core.IO.Serialization.ObjectStorageConfiguration, Mirage.Core"/>
			<section name="MudFactory" type="Mirage.Core.Data.MudFactoryConfigSection, Mirage.Core"/>
			<section name="CommandLocations" type="System.Configuration.AppSettingsSection,System.configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
			<section name="MessageNamespaces"  type="System.Configuration.AppSettingsSection,System.configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
			<section name="Roles"  type="System.Configuration.AppSettingsSection,System.configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
		</sectionGroup>
		<section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net"/>
		<section name="JsonMessageFactory" type="JsonExSerializer.XmlConfigSection, JsonExSerializer"/>
	</configSections>
	<castle>
		<facilities>
			<facility id="startable.facility"
			  type="Castle.Facilities.Startable.StartableFacility, Castle.MicroKernel" />
			<facility id="logging.facility"
			  type="Castle.Facilities.Logging.LoggingFacility, Castle.Facilities.Logging"
			  loggingApi="log4net" />
		</facilities>
		<components>
			
			<!-- ======  Start IO Section ====== -->
			<!-- Configure ports and clients here -->
			
			<!-- Recieves text input, this is your main client port -->
			<component id="TextClientListener"
					   type="Mirage.Stock.IO.TextClientListener, Mirage.Stock"
					   service="Mirage.Core.IO.IClientListener, Mirage.Core"
					   lifestyle="transient">
				<parameters>
					<!-- specify the host if you need to listen on a specific IP or domain -->
					<!--
						<host>localhost</host>
					-->
					<port>4500</port>
				</parameters>
			</component>
			
			<!-- Port for the GUI client, if you don't use the GUI client, then comment this out -->
			<component id="GuiClientListener"
					   type="Mirage.Stock.IO.GuiClientListener, Mirage.Stock"
					   service="Mirage.Core.IO.IClientListener, Mirage.Core"
					   lifestyle="transient">
				<parameters>
					<!-- specify the host if you need to listen on a specific IP or domain -->
					<!--
						<host>localhost</host>
					-->
					<port>4501</port>
				</parameters>
			</component>
			
			<component id="ClientManager"
					   type="Mirage.Core.IO.ClientManager, Mirage.Core"
					   service="Mirage.Core.IO.ClientManager, Mirage.Core">
				<!-- Specify the number of threads the client manager uses if you need to, but
				     otherwise it defaults to the number of processors -->
				<!--
				<parameters>
					<maxThreads>2</maxThreads>
				</parameters>
				-->
			</component>
			<!-- ******* End IO Section ******** -->
			
			<!-- Player Processing -->
			<component id="PlayerService" type="Mirage.Core.Data.PlayerExecutorServiceBase, Mirage.Core" />

			<component id="RaceRepository" type="Mirage.Core.Data.RaceRepository, Mirage.Core"
					   service="Mirage.Core.Data.IRaceRepository, Mirage.Core" />

			<component id="mudrepository"
					   type="Mirage.Core.Data.StockRepository, Mirage.Core"
					   service="Mirage.Core.Data.MudRepositoryBase, Mirage.Core">
				<parameters>
					<Channels>${ChannelRepository}</Channels>
				</parameters>
			</component>
			<component id="QueryManager"
					   type="Mirage.Core.Data.Query.QueryManager, Mirage.Core"
					   service="Mirage.Core.Data.Query.IQueryManager, Mirage.Core"
			  lifestyle="transient">
				<parameters>
					<root>${mudrepository}</root>
				</parameters>
			</component>
			<component id="PlayerRepository"
					   type="Mirage.Core.Data.PlayerRepository`1[[Mirage.Core.Data.Player, Mirage.Core]], Mirage.Core"
					   service="Mirage.Core.Data.IPlayerRepository, Mirage.Core" />
			<component id="AreaRepository"
					   type="Mirage.Core.Data.AreaRepository`1[[Mirage.Core.Data.Area, Mirage.Core]], Mirage.Core"
					   service="Mirage.Core.Data.IAreaRepository, Mirage.Core" />

			<component id="ChannelRepository"
					   type="Mirage.Core.Communication.ChannelRepository, Mirage.Core"
					   service="Mirage.Core.Communication.IChannelRepository, Mirage.Core" />

			<component id="MobileRepository"
					   type="Mirage.Core.Data.MobileRepository, Mirage.Core"
					   service="Mirage.Core.Data.IMobileRepository, Mirage.Core" />

			<component id="SkillRepository"
					   type="Mirage.Core.Data.Skills.SkillRepository, Mirage.Core"
					   service="Mirage.Core.Data.Skills.ISkillRepository, Mirage.Core" />

			<!-- Mobile Processing -->
			<component id="MobileService" type="Mirage.Core.Data.MobileService, Mirage.Core">
				<parameters>
					<repository>${mudrepository}</repository>
				</parameters>
			</component>

			<component id="MessageFactory"
					   type="Mirage.Core.Communication.MessageFactory, Mirage.Core"
					   service="Mirage.Core.Communication.IMessageFactory, Mirage.Core" />
			<component id="ViewManager"
					   type="Mirage.Core.Data.ViewManager, Mirage.Core"
					   service="Mirage.Core.Data.IViewManager, Mirage.Core"
					   lifestyle="transient"/>



			<component id="MirageServer" type="Mirage.Core.MirageServer, Mirage.Core">
				<parameters>
					<Services>
						<list>
							<serviceentry>
								<service>${PlayerService}</service>
								<method>ClearFlagsAndRemove</method>
							</serviceentry>
							<serviceentry>
								<service>${PlayerService}</service>
								<method>ReadInput</method>
							</serviceentry>
							<serviceentry>
								<service>${MobileService}</service>
								<method>ProcessInput</method>
							</serviceentry>
							<serviceentry>
								<service>${PlayerService}</service>
								<method>WriteOutput</method>
							</serviceentry>
						</list>
					</Services>
				</parameters>
			</component>
		</components>
	</castle>
	<appSettings>
		<add key="default.room" value="Areas/DefaultArea/Rooms/DefaultRoom"/>
	</appSettings>
	<log4net>
		<appender name="OutputDebugStringAppender" type="log4net.Appender.OutputDebugStringAppender" >
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%date [%thread] %-5level %logger [%property{NDC}] - %message%newline" />
			</layout>
		</appender>
		<appender name="ColoredConsoleAppender" type="log4net.Appender.ColoredConsoleAppender">
			<mapping>
				<level value="ERROR" />
				<foreColor value="Red" />
			</mapping>
			<mapping>
				<level value="DEBUG" />
				<backColor value="Green" />
			</mapping>
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%date [%thread] %-5level %logger - %message%newline" />
			</layout>
		</appender>
		<appender name="FileAppender" type="log4net.Appender.FileAppender">
			<file value="MirageMUD.log" />
			<appendToFile value="false" />
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%date [%thread] %-5level %logger - %message%newline" />
			</layout>
		</appender>
		<root>
			<level value="DEBUG" />
			<appender-ref ref="ColoredConsoleAppender" />
			<appender-ref ref="FileAppender" />
		</root>
		<logger name="DebugLogger">
			<level value="DEBUG" />
		</logger>
	</log4net>
	<MirageMUD>
		<ObjectStorageFactory>
			<PersistenceManagers>
				<add name="player"
					 base-path="players/"
					 file-extension=".jsx"
					 type="Mirage.Core.IO.Serialization.JsonExPersistenceAdapter"
					 persisted-type="Mirage.Core.Data.Player, Mirage.Core"/>
				<add name="area"
					 base-path="areas/"
					 file-extension=".jsx"
					 type="Mirage.Core.IO.Serialization.JsonExPersistenceAdapter"
					 persisted-type="Mirage.Core.Data.Area, Mirage.Core"/>
			</PersistenceManagers>
		</ObjectStorageFactory>
		<MessageNamespaces>
			<!-- NOTE, namespaces(keys) must end in a slash -->
			<add key="system" value="messages/system.msg" />
			<add key="common.error" value="messages/common.error.msg" />
			<add key="communication" value="messages/communication.msg" />
			<add key="movement" value="messages/movement.msg" />
			<add key="negotiation" value="messages/negotiation.msg" />
			<add key="negotiation.authentication" value="messages/negotiation.authentication.msg" />
		</MessageNamespaces>
		<Roles>
			<add key="player" value="Role for all players" />
			<add key="admin" value="Admin role has every system right regardless of role" />
			<add key="immortal" value="All immortals should have this role" />
			<add key="coder" value="For coder commands such as debugging, clearing caches, etc" />
			<add key="builder" value="Area builders" />
		</Roles>
	</MirageMUD>
	<JsonMessageFactory>
		<TypeBindings>
			<add alias="StringMessage" type="Mirage.Core.Communication.StringMessage, Mirage.Core" />
			<add alias="ResourceMessage" type="Mirage.Core.Communication.ResourceMessage, Mirage.Core" />
		</TypeBindings>
	</JsonMessageFactory>
</configuration>